#!/bin/bash
# org模块接口测试脚本
# 生成时间：2025-09-17
# 模块路径：D:\keycloak_sb_sso_new0910_claude\ps\ps-be\src\main\java\com\jiuxi\module\org
# 脚本版本：v1.0

# ======================================
# 测试环境配置
# ======================================

# 服务器配置
BASE_URL="http://localhost:8080"
CONTENT_TYPE="Content-Type: application/json"

# 认证配置
JWT_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."  # 请替换为实际的JWT Token
USER_PERSON_ID="test-user-001"
TENANT_ID="test-tenant-001"

# 测试数据配置
TEST_DEPT_ID="test-dept-001"
TEST_ENT_ID="test-ent-001"
NEW_DEPT_ID=""
NEW_ENT_ID=""

# 颜色配置
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ======================================
# 工具函数
# ======================================

# 打印带颜色的消息
print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# 执行HTTP请求并检查结果
execute_request() {
    local method=$1
    local url=$2
    local data=$3
    local expected_code=$4
    local test_name=$5
    
    print_info "执行测试: $test_name"
    
    if [ -z "$data" ]; then
        response=$(curl -s -w "\n%{http_code}" -X $method \
            -H "$CONTENT_TYPE" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "X-User-Person-Id: $USER_PERSON_ID" \
            -H "X-Tenant-Id: $TENANT_ID" \
            "$BASE_URL$url")
    else
        response=$(curl -s -w "\n%{http_code}" -X $method \
            -H "$CONTENT_TYPE" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "X-User-Person-Id: $USER_PERSON_ID" \
            -H "X-Tenant-Id: $TENANT_ID" \
            -d "$data" \
            "$BASE_URL$url")
    fi
    
    # 分离响应体和状态码
    http_code=$(echo "$response" | tail -n1)
    response_body=$(echo "$response" | head -n -1)
    
    # 检查HTTP状态码
    if [ "$http_code" -eq "$expected_code" ]; then
        print_success "测试通过 - HTTP状态码: $http_code"
        echo "响应内容: $response_body"
        return 0
    else
        print_error "测试失败 - 期望状态码: $expected_code, 实际状态码: $http_code"
        echo "响应内容: $response_body"
        return 1
    fi
}

# 检查JSON响应中的success字段
check_json_success() {
    local response=$1
    local success=$(echo "$response" | grep -o '"success":[^,}]*' | cut -d':' -f2 | tr -d ' ')
    
    if [ "$success" = "true" ]; then
        return 0
    else
        return 1
    fi
}

# 提取JSON响应中的字段值
extract_json_field() {
    local response=$1
    local field=$2
    echo "$response" | grep -o "\"$field\":\"[^\"]*\"" | cut -d':' -f2 | tr -d '"'
}

# ======================================
# 测试前准备
# ======================================

setup_test_environment() {
    print_info "=========================================="
    print_info "开始org模块接口测试"
    print_info "=========================================="
    print_info "服务器地址: $BASE_URL"
    print_info "租户ID: $TENANT_ID"
    print_info "用户ID: $USER_PERSON_ID"
    print_info "=========================================="
}

cleanup_test_data() {
    print_info "清理测试数据..."
    
    # 删除测试创建的部门（如果存在）
    if [ ! -z "$NEW_DEPT_ID" ]; then
        curl -s -X DELETE \
            -H "$CONTENT_TYPE" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "X-User-Person-Id: $USER_PERSON_ID" \
            -H "X-Tenant-Id: $TENANT_ID" \
            "$BASE_URL/api/v1/departments/$NEW_DEPT_ID" > /dev/null
    fi
    
    # 删除测试创建的企业（如果存在）
    if [ ! -z "$NEW_ENT_ID" ]; then
        curl -s -X POST \
            -H "$CONTENT_TYPE" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "X-User-Person-Id: $USER_PERSON_ID" \
            -d "{\"entId\":\"$NEW_ENT_ID\",\"jwtpid\":\"$USER_PERSON_ID\"}" \
            "$BASE_URL/sys/ent/delete" > /dev/null
    fi
    
    print_info "测试数据清理完成"
}

# ======================================
# 部门管理接口测试
# ======================================

test_department_management() {
    print_info "==========================================  "
    print_info "开始部门管理接口测试"
    print_info "=========================================="
    
    # 测试1: 创建部门
    print_info "测试1: 创建部门"
    create_dept_data='{
        "deptName": "自动化测试部门",
        "deptSimpleName": "测试部",
        "deptFullName": "自动化测试部门全称",
        "parentDeptId": "'$TEST_DEPT_ID'",
        "type": "FUNCTIONAL",
        "managerId": "manager-001",
        "contactPhone": "010-12345678",
        "address": "北京市朝阳区测试地址",
        "description": "自动化测试创建的部门",
        "orderIndex": 1
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -H "X-User-Person-Id: $USER_PERSON_ID" \
        -H "X-Tenant-Id: $TENANT_ID" \
        -d "$create_dept_data" \
        "$BASE_URL/api/v1/departments")
    
    if check_json_success "$response"; then
        NEW_DEPT_ID=$(extract_json_field "$response" "deptId")
        print_success "部门创建成功，部门ID: $NEW_DEPT_ID"
    else
        print_error "部门创建失败"
        echo "响应: $response"
    fi
    
    # 测试2: 查询部门详情
    print_info "测试2: 查询部门详情"
    if [ ! -z "$NEW_DEPT_ID" ]; then
        execute_request "GET" "/api/v1/departments/$NEW_DEPT_ID" "" 200 "查询新创建部门详情"
    else
        execute_request "GET" "/api/v1/departments/$TEST_DEPT_ID" "" 200 "查询测试部门详情"
    fi
    
    # 测试3: 更新部门信息
    print_info "测试3: 更新部门信息"
    if [ ! -z "$NEW_DEPT_ID" ]; then
        update_dept_data='{
            "deptName": "自动化测试部门-已更新",
            "description": "已更新的部门描述"
        }'
        execute_request "PUT" "/api/v1/departments/$NEW_DEPT_ID" "$update_dept_data" 200 "更新部门信息"
    fi
    
    # 测试4: 获取部门树形结构
    print_info "测试4: 获取部门树形结构"
    execute_request "GET" "/api/v1/departments/tree" "" 200 "获取部门树形结构"
    
    # 测试5: 查询根部门列表
    print_info "测试5: 查询根部门列表"
    execute_request "GET" "/api/v1/departments/root" "" 200 "查询根部门列表"
    
    # 测试6: 启用部门
    print_info "测试6: 启用部门"
    if [ ! -z "$NEW_DEPT_ID" ]; then
        execute_request "PUT" "/api/v1/departments/$NEW_DEPT_ID/enable" "" 200 "启用部门"
    fi
    
    # 测试7: 停用部门
    print_info "测试7: 停用部门"
    if [ ! -z "$NEW_DEPT_ID" ]; then
        execute_request "PUT" "/api/v1/departments/$NEW_DEPT_ID/disable" "" 200 "停用部门"
    fi
    
    # 测试8: 查询部门统计信息
    print_info "测试8: 查询部门统计信息"
    if [ ! -z "$NEW_DEPT_ID" ]; then
        execute_request "GET" "/api/v1/departments/$NEW_DEPT_ID/statistics" "" 200 "查询部门统计信息"
    fi
    
    # 测试9: 获取租户部门概览
    print_info "测试9: 获取租户部门概览"
    execute_request "GET" "/api/v1/departments/overview" "" 200 "获取租户部门概览"
    
    # 测试10: 删除部门
    print_info "测试10: 删除部门"
    if [ ! -z "$NEW_DEPT_ID" ]; then
        execute_request "DELETE" "/api/v1/departments/$NEW_DEPT_ID" "" 200 "删除部门"
        NEW_DEPT_ID=""  # 清空ID，避免重复删除
    fi
}

# ======================================
# 企业管理接口测试
# ======================================

test_enterprise_management() {
    print_info "=========================================="
    print_info "开始企业管理接口测试"
    print_info "=========================================="
    
    # 测试1: 分页查询企业列表
    print_info "测试1: 分页查询企业列表"
    list_query_data='{
        "current": 1,
        "size": 10
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -H "X-User-Person-Id: $USER_PERSON_ID" \
        -d "$list_query_data" \
        "$BASE_URL/sys/ent/list?jwtpid=$USER_PERSON_ID&jwtaid=$TENANT_ID")
    
    print_info "企业列表查询响应: $response"
    
    # 测试2: 新增企业
    print_info "测试2: 新增企业"
    create_ent_data='{
        "entFullName": "自动化测试企业有限公司",
        "entSimpleName": "测试企业",
        "entUnifiedCode": "91110000000000009X",
        "entType": "有限责任公司",
        "legalRepr": "张三",
        "legalReprTel": "13800138001",
        "linkPsnName": "李四",
        "linkPsnTel": "13800138002",
        "regFund": "1000万元",
        "entAddr": "北京市朝阳区测试地址"
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -H "X-User-Person-Id: $USER_PERSON_ID" \
        -d "$create_ent_data" \
        "$BASE_URL/sys/ent/add?jwtpid=$USER_PERSON_ID")
    
    if check_json_success "$response"; then
        NEW_ENT_ID=$(extract_json_field "$response" "data")
        print_success "企业创建成功，企业ID: $NEW_ENT_ID"
    else
        print_error "企业创建失败"
        echo "响应: $response"
    fi
    
    # 测试3: 查看企业详情
    print_info "测试3: 查看企业详情"
    if [ ! -z "$NEW_ENT_ID" ]; then
        view_ent_data="{\"entId\":\"$NEW_ENT_ID\"}"
        response=$(curl -s -X POST \
            -H "$CONTENT_TYPE" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -d "$view_ent_data" \
            "$BASE_URL/sys/ent/view")
        print_info "企业详情查询响应: $response"
    fi
    
    # 测试4: 修改企业信息
    print_info "测试4: 修改企业信息"
    if [ ! -z "$NEW_ENT_ID" ]; then
        update_ent_data='{
            "entId": "'$NEW_ENT_ID'",
            "entFullName": "自动化测试企业有限公司-已更新",
            "entDesc": "已更新的企业描述"
        }'
        
        response=$(curl -s -X POST \
            -H "$CONTENT_TYPE" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "X-User-Person-Id: $USER_PERSON_ID" \
            -d "$update_ent_data" \
            "$BASE_URL/sys/ent/update?jwtpid=$USER_PERSON_ID")
        
        if check_json_success "$response"; then
            print_success "企业信息更新成功"
        else
            print_error "企业信息更新失败"
            echo "响应: $response"
        fi
    fi
    
    # 测试5: 获取企业管理员列表
    print_info "测试5: 获取企业管理员列表"
    admin_query_data='{
        "current": 1,
        "size": 10
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -d "$admin_query_data" \
        "$BASE_URL/sys/ent/ent-admin-list?jwtpid=$USER_PERSON_ID")
    
    print_info "企业管理员列表响应: $response"
    
    # 测试6: 删除企业（在cleanup中执行，这里不删除）
    print_info "测试6: 企业删除功能将在测试结束后执行"
}

# ======================================
# 组织部门管理接口测试  
# ======================================

test_organization_department() {
    print_info "=========================================="
    print_info "开始组织部门管理接口测试"
    print_info "=========================================="
    
    # 测试1: 机构树查询
    print_info "测试1: 政府机构树查询"
    org_tree_data='{
        "deptId": "",
        "jwtdid": "'$TEST_DEPT_ID'",
        "sync": 1
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -d "$org_tree_data" \
        "$BASE_URL/sys/dept/org/tree")
    
    print_info "政府机构树查询响应: $response"
    
    # 测试2: 完整机构树查询
    print_info "测试2: 完整政府机构树查询"
    all_tree_data='{
        "sync": 1,
        "deptId": ""
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -d "$all_tree_data" \
        "$BASE_URL/sys/dept/org/all-tree")
    
    print_info "完整机构树查询响应: $response"
    
    # 测试3: 企业部门树查询
    print_info "测试3: 企业部门树查询"
    ent_tree_data='{
        "sync": 1,
        "deptId": "",
        "jwtdid": "'$TEST_DEPT_ID'"
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -d "$ent_tree_data" \
        "$BASE_URL/sys/dept/ent/tree")
    
    print_info "企业部门树查询响应: $response"
    
    # 测试4: 查询下级部门
    print_info "测试4: 查询下级部门"
    children_data='{
        "parentId": "'$TEST_DEPT_ID'",
        "deptType": "",
        "filterCommAscn": "0",
        "category": 1
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -d "$children_data" \
        "$BASE_URL/sys/dept/children")
    
    print_info "下级部门查询响应: $response"
    
    # 测试5: 查询部门信息
    print_info "测试5: 查询部门信息"
    view_dept_data='{
        "deptId": "'$TEST_DEPT_ID'",
        "jwtpid": "'$USER_PERSON_ID'",
        "jwtaid": "'$TENANT_ID'"
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -d "$view_dept_data" \
        "$BASE_URL/sys/dept/view")
    
    print_info "部门信息查询响应: $response"
}

# ======================================
# 移动端接口测试
# ======================================

test_mobile_api() {
    print_info "=========================================="
    print_info "开始移动端接口测试"
    print_info "=========================================="
    
    # 测试1: 移动端机构树查询
    print_info "测试1: 移动端政府机构树查询"
    mobile_org_data='{
        "sync": 1,
        "deptId": "",
        "jwtdid": "'$TEST_DEPT_ID'"
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -d "$mobile_org_data" \
        "$BASE_URL/app/sys/dept/org/tree")
    
    print_info "移动端机构树查询响应: $response"
    
    # 测试2: 移动端完整机构树查询
    print_info "测试2: 移动端完整机构树查询"
    mobile_all_tree_data='{
        "sync": 1,
        "deptId": ""
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -d "$mobile_all_tree_data" \
        "$BASE_URL/app/sys/dept/org/all-tree")
    
    print_info "移动端完整机构树查询响应: $response"
    
    # 测试3: 移动端企业部门树查询
    print_info "测试3: 移动端企业部门树查询"
    mobile_ent_data='{
        "sync": 1,
        "deptId": "",
        "jwtdid": "'$TEST_DEPT_ID'"
    }'
    
    response=$(curl -s -X POST \
        -H "$CONTENT_TYPE" \
        -d "$mobile_ent_data" \
        "$BASE_URL/app/sys/dept/ent/tree")
    
    print_info "移动端企业部门树查询响应: $response"
}

# ======================================
# 异常场景测试
# ======================================

test_error_scenarios() {
    print_info "=========================================="
    print_info "开始异常场景测试"
    print_info "=========================================="
    
    # 测试1: 无效Token测试
    print_info "测试1: 无效Token测试"
    response=$(curl -s -w "\n%{http_code}" -X GET \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer invalid_token" \
        -H "X-User-Person-Id: $USER_PERSON_ID" \
        -H "X-Tenant-Id: $TENANT_ID" \
        "$BASE_URL/api/v1/departments/tree")
    
    http_code=$(echo "$response" | tail -n1)
    if [ "$http_code" -eq 401 ]; then
        print_success "无效Token测试通过 - 正确返回401"
    else
        print_warning "无效Token测试异常 - 状态码: $http_code"
    fi
    
    # 测试2: 查询不存在的部门
    print_info "测试2: 查询不存在的部门"
    response=$(curl -s -X GET \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -H "X-User-Person-Id: $USER_PERSON_ID" \
        -H "X-Tenant-Id: $TENANT_ID" \
        "$BASE_URL/api/v1/departments/nonexistent-dept-id")
    
    if ! check_json_success "$response"; then
        print_success "不存在部门查询测试通过 - 正确返回失败"
    else
        print_warning "不存在部门查询测试异常 - 应该返回失败"
    fi
    
    # 测试3: 创建部门参数验证
    print_info "测试3: 创建部门参数验证测试"
    invalid_dept_data='{
        "deptSimpleName": "测试部门"
    }'
    
    response=$(curl -s -w "\n%{http_code}" -X POST \
        -H "$CONTENT_TYPE" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -H "X-User-Person-Id: $USER_PERSON_ID" \
        -H "X-Tenant-Id: $TENANT_ID" \
        -d "$invalid_dept_data" \
        "$BASE_URL/api/v1/departments")
    
    http_code=$(echo "$response" | tail -n1)
    response_body=$(echo "$response" | head -n -1)
    
    if [ "$http_code" -eq 400 ] || ! check_json_success "$response_body"; then
        print_success "参数验证测试通过 - 正确拒绝无效数据"
    else
        print_warning "参数验证测试异常 - 应该拒绝无效数据"
    fi
}

# ======================================
# 性能测试
# ======================================

test_performance() {
    print_info "=========================================="
    print_info "开始性能测试"
    print_info "=========================================="
    
    # 测试1: 并发查询测试
    print_info "测试1: 并发查询测试(10个并发请求)"
    
    start_time=$(date +%s.%N)
    
    for i in {1..10}; do
        {
            curl -s -X GET \
                -H "$CONTENT_TYPE" \
                -H "Authorization: Bearer $JWT_TOKEN" \
                -H "X-User-Person-Id: $USER_PERSON_ID" \
                -H "X-Tenant-Id: $TENANT_ID" \
                "$BASE_URL/api/v1/departments/tree" > /dev/null
        } &
    done
    
    wait  # 等待所有后台任务完成
    
    end_time=$(date +%s.%N)
    duration=$(echo "$end_time - $start_time" | bc)
    
    print_success "并发查询测试完成，耗时: ${duration}秒"
    
    # 测试2: 响应时间测试
    print_info "测试2: 响应时间测试"
    
    total_time=0
    test_count=5
    
    for i in $(seq 1 $test_count); do
        start_time=$(date +%s.%N)
        
        curl -s -X GET \
            -H "$CONTENT_TYPE" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "X-User-Person-Id: $USER_PERSON_ID" \
            -H "X-Tenant-Id: $TENANT_ID" \
            "$BASE_URL/api/v1/departments/tree" > /dev/null
        
        end_time=$(date +%s.%N)
        duration=$(echo "$end_time - $start_time" | bc)
        total_time=$(echo "$total_time + $duration" | bc)
        
        print_info "第${i}次请求耗时: ${duration}秒"
    done
    
    avg_time=$(echo "scale=3; $total_time / $test_count" | bc)
    print_success "平均响应时间: ${avg_time}秒"
    
    # 性能指标判断
    if (( $(echo "$avg_time < 1.0" | bc -l) )); then
        print_success "性能测试通过 - 平均响应时间小于1秒"
    else
        print_warning "性能测试需要关注 - 平均响应时间超过1秒"
    fi
}

# ======================================
# 生成测试报告
# ======================================

generate_test_report() {
    print_info "=========================================="
    print_info "生成测试报告"
    print_info "=========================================="
    
    report_file="org_test_report_$(date +%Y%m%d_%H%M%S).txt"
    
    cat > "$report_file" << EOF
# org模块接口测试报告

## 测试基本信息
- 测试时间: $(date)
- 测试环境: $BASE_URL
- 租户ID: $TENANT_ID
- 用户ID: $USER_PERSON_ID

## 测试结果汇总
- 部门管理接口测试: 已执行
- 企业管理接口测试: 已执行
- 组织部门管理接口测试: 已执行
- 移动端接口测试: 已执行
- 异常场景测试: 已执行
- 性能测试: 已执行

## 测试说明
本次测试覆盖了org模块的主要功能接口，包括：
1. 部门CRUD操作
2. 企业信息管理
3. 组织架构查询
4. 移动端接口
5. 异常处理
6. 性能指标

## 注意事项
- 请确保JWT Token有效
- 请确保测试数据准备完整
- 建议在测试环境执行，避免影响生产数据
- 性能测试结果仅供参考，实际性能需结合具体环境评估

EOF

    print_success "测试报告已生成: $report_file"
}

# ======================================
# 主测试流程
# ======================================

main() {
    # 检查依赖工具
    if ! command -v curl &> /dev/null; then
        print_error "curl 工具未安装，请先安装 curl"
        exit 1
    fi
    
    if ! command -v bc &> /dev/null; then
        print_error "bc 工具未安装，请先安装 bc (用于性能测试计算)"
        print_warning "性能测试将被跳过"
    fi
    
    # 设置测试环境
    setup_test_environment
    
    # 执行测试
    test_department_management
    test_enterprise_management
    test_organization_department
    test_mobile_api
    test_error_scenarios
    
    # 性能测试（如果bc可用）
    if command -v bc &> /dev/null; then
        test_performance
    else
        print_warning "跳过性能测试（bc工具不可用）"
    fi
    
    # 清理测试数据
    cleanup_test_data
    
    # 生成测试报告
    generate_test_report
    
    print_info "=========================================="
    print_success "org模块接口测试完成"
    print_info "=========================================="
}

# ======================================
# 脚本使用说明
# ======================================

show_usage() {
    echo "org模块接口测试脚本使用说明"
    echo ""
    echo "使用方法:"
    echo "  ./org-测试脚本 [选项]"
    echo ""
    echo "选项:"
    echo "  -h, --help     显示此帮助信息"
    echo "  -u, --url      设置服务器地址 (默认: http://localhost:8080)"
    echo "  -t, --token    设置JWT Token"
    echo "  -user          设置用户ID (默认: test-user-001)"
    echo "  -tenant        设置租户ID (默认: test-tenant-001)"
    echo ""
    echo "示例:"
    echo "  ./org-测试脚本"
    echo "  ./org-测试脚本 -u http://localhost:8080 -t your_jwt_token"
    echo "  ./org-测试脚本 --url http://test-server:8080 --token eyJ..."
    echo ""
    echo "注意事项:"
    echo "1. 请确保目标服务器可访问"
    echo "2. 请使用有效的JWT Token"
    echo "3. 请确保测试账号具有相应权限"
    echo "4. 建议在测试环境中执行"
}

# ======================================
# 参数解析
# ======================================

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -u|--url)
            BASE_URL="$2"
            shift 2
            ;;
        -t|--token)
            JWT_TOKEN="$2"
            shift 2
            ;;
        -user)
            USER_PERSON_ID="$2"
            shift 2
            ;;
        -tenant)
            TENANT_ID="$2"
            shift 2
            ;;
        *)
            print_error "未知参数: $1"
            show_usage
            exit 1
            ;;
    esac
done

# ======================================
# 执行主函数
# ======================================

# 检查JWT Token是否设置
if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." ]; then
    print_warning "JWT_TOKEN 未设置或使用默认值，请使用 -t 参数设置有效的Token"
    print_info "示例: ./org-测试脚本 -t your_actual_jwt_token"
    print_info "继续使用默认Token进行测试（可能会失败）..."
fi

# 执行主测试流程
main "$@"